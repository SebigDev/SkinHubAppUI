/**
 * SkinHubApp API
 * A Skin Cream, Soap and Beauty Analysis Forum
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { LoginDto } from '../model/loginDto';
import { MemberDto } from '../model/memberDto';
import { RegisterDto } from '../model/registerDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MemberService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retrieves Member By Member Color Identity
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMemberGetMemberByColorGet(color?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiMemberGetMemberByColorGet(color?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiMemberGetMemberByColorGet(color?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiMemberGetMemberByColorGet(color?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (color !== undefined) {
            queryParameters = queryParameters.set('color', <any>color);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Member/GetMemberByColor`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves Member by Member Identity
     * 
     * @param ID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMemberGetMemberByIDGet(ID?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiMemberGetMemberByIDGet(ID?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiMemberGetMemberByIDGet(ID?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiMemberGetMemberByIDGet(ID?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ID !== undefined) {
            queryParameters = queryParameters.set('ID', <any>ID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Member/GetMemberByID`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves Member by Member&#39;s Username
     * 
     * @param username 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMemberGetMemberByUsernameGet(username?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiMemberGetMemberByUsernameGet(username?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiMemberGetMemberByUsernameGet(username?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiMemberGetMemberByUsernameGet(username?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (username !== undefined) {
            queryParameters = queryParameters.set('username', <any>username);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Member/GetMemberByUsername`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



  /**
    * Updates a Member
    * 
    * @param memberDto
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
  public apiMemberUpdateMemberPut(model?: MemberDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public apiMemberUpdateMemberPut(model?: MemberDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public apiMemberUpdateMemberPut(model?: MemberDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public apiMemberUpdateMemberPut(model?: MemberDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json-patch+json',
      'application/json',
      'text/json',
      'application/_*+json'
    ];

    return this.httpClient.put<any>(`${this.basePath}/api/Member/UpdateMember`,
      model,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

    /**
     * Logs in a Member
     * 
     * @param loginDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMemberLoginPost(loginDto?: LoginDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiMemberLoginPost(loginDto?: LoginDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiMemberLoginPost(loginDto?: LoginDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiMemberLoginPost(loginDto?: LoginDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/Member/Login`,
            loginDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a New Member
     * 
     * @param registerDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMemberRegisterPost(registerDto?: RegisterDto, observe?: 'body', reportProgress?: boolean): Observable<MemberDto>;
    public apiMemberRegisterPost(registerDto?: RegisterDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MemberDto>>;
    public apiMemberRegisterPost(registerDto?: RegisterDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MemberDto>>;
    public apiMemberRegisterPost(registerDto?: RegisterDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<MemberDto>(`${this.basePath}/api/Member/Register`,
            registerDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
